######
# All macros related to print state (start, end, cancel, pause, resume, etc.)
######

#######################################################################
# PRINT_START
# Macro to run at start of print. This macro should be referenced in 
# your Slicer's starting G-Code
#######################################################################

[gcode_macro PRINT_START]
description: Start print procedure, use this in your Slicer.
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # start with the print fan off
  M107
  # Pre-heat
  SET_DISPLAY_TEXT MSG="Pre-heat..."
  # Start bed heater
  RESPOND MSG="Pre-heat bed ..."
  M140 S{BED_TEMP} 
  # Optionally start heating extruder to reduced temp to prevent oozing
  {% if printer["gcode_macro _MACRO_CONFIG"].preheat_extruder_offset != 0 %}
    {% set preheat_temp = EXTRUDER_TEMP - printer["gcode_macro _MACRO_CONFIG"].preheat_extruder_offset %}
  {% elif printer["gcode_macro _MACRO_CONFIG"].preheat_extruder_temp != 0 %}
    {% set preheat_temp = printer["gcode_macro _MACRO_CONFIG"].preheat_extruder_temp %}
  {% else %}
    {% set preheat_temp = 0 %}
  {% endif %}
  {% if preheat_temp != 0 %}
    RESPOND MSG="Pre-heat extruder ..."
    M104 S{preheat_temp}
  {% endif %}
  # Home if needed
  MAYBE_HOME
  # TRAM the Z axis if needed
  _MAYBE_TRAM_Z
  # Run the customizable "HEAT_CHAMBER" macro (default implementation does nothing)
  _PRINT_START_HEAT_CHAMBER CHAMBER_TEMP={CHAMBER_TEMP}
  # Wait for bed to finish heating if it hasn't already
  RESPOND MSG="Heat bed ..."
  M190 S{BED_TEMP}
  # Always re-home after heat soak
  G28
  # Run the customizable "BED_MESH" macro
  _PRINT_START_BED_MESH BED_TEMP={BED_TEMP}
  # Run the customizable "PARK" macro
  _PRINT_START_PARK
  # Finish heating extruder
  RESPOND MSG="Heat extruder ..."
  SET_DISPLAY_TEXT MSG="Heat extruder"
  M109 S{EXTRUDER_TEMP}
  _PRINT_START_PRIME
  RESPOND MSG="Printing..."
  SET_DISPLAY_TEXT MSG="Printing"
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro _MACRO_CONFIG"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _PRINT_START_HEAT_CHAMBER]
gcode:
    # CHAMBER_TEMP should be set to the value supplied by the slicer.
    {% set chamber_temp = params.CHAMBER_TEMP|int|default(0) %}
    {% set heatsoak_mode = printer["gcode_macro _MACRO_CONFIG"].heatsoak|lower %}
    {% set chamber_sensor = printer["temperature_sensor chamber"] %}
    {% set heatsoak_minutes = printer["gcode_macro _MACRO_CONFIG"].heatsoak_minutes|int|default(0) %}

    {% if heatsoak_mode == "chamber" and chamber_temp != 0 and chamber_sensor is not none %}
      # Wait for chamber thermistor to hit a specified value
      SET_DISPLAY_TEXT MSG="Chamber heat {temp}"
      RESPOND MSG="Chamber heat {temp}"
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={temp}
      SET_DISPLAY_TEXT MSG="Chamber heat complete"
      RESPOND MSG="Chamber heat complete"
    {% elif (heatsoak_mode == "chamber" or heatsoak_mode == "time") and heatsoak_minutes != 0 %}
      # Wait a fixed number of minutes
      WAIT_FOR MSG="Heat soak" M={heatsoak_minutes}
    {% endif %}

[gcode_macro _PRINT_START_BED_MESH]
gcode:
  {% set BED_TEMP = params.BED_TEMP|int|default(0) %}
  {% set calibrate_bed_mesh = printer["gcode_macro _MACRO_CONFIG"].calibrate_bed_mesh|lower  %}
  {% set profile = "default" %}
  {% if printer["gcode_macro _MACRO_CONFIG"].calibrate_bed_mesh|lower == "temp" %}
    {% set profile = "temp_%s" % (BED_TEMP) %}
  {% endif %}
  {% set has_probe = printer.configfile.settings["probe"] is defined %}
  {% set profile_exists = ((printer.bed_mesh is defined) and (printer.bed_mesh.profiles[profile] is defined)) %}
  #RESPOND MSG="BED_TEMP={BED_TEMP}; calibrate_bed_mesh={calibrate_bed_mesh}; has_probe={has_probe}; profile={profile}; profile_exists={profile_exists}"
  {% if calibrate_bed_mesh == "calibrate" %}
    {% if has_probe %}
      RESPOND MSG="Calibrating bed mesh to profile: {profile}"
      SET_DISPLAY_TEXT MSG="Calibrating bed mesh"
      BED_MESH_CALIBRATE PROFILE={profile}
      BED_MESH_OUTPUT
    {% else %}
      RESPOND TYPE=error MSG="ERROR: calibrate_bed_mesh was set to 'calibrate' but printer has no probe defined"
    {% endif %}
  {% elif calibrate_bed_mesh == "default" or calibrate_bed_mesh == "temp" %}
    {% if profile_exists %}
      RESPOND MSG="Loading bed mesh from profile: {profile}"
      SET_DISPLAY_TEXT MSG="Loading bed mesh"
      BED_MESH_PROFILE LOAD={profile}
    {% elif has_probe %}
      RESPOND MSG="Calibrating bed mesh to profile: {profile}"
      SET_DISPLAY_TEXT MSG="Calibrating bed mesh"
      BED_MESH_CALIBRATE PROFILE={profile}
      BED_MESH_OUTPUT
    {% else %}
      RESPOND TYPE=error MSG="ERROR: calibrate_bed_mesh was set to '{calibrate_bed_mesh}' but mesh profile '{profile}' does not exist"
    {% endif %}
  {% endif %}

[gcode_macro _PRINT_START_PARK]
gcode:
  {% set z = printer["gcode_macro _MACRO_CONFIG"].start_print_park_z_height|float %}
  _PARK LOCATION={printer["gcode_macro _MACRO_CONFIG"].start_print_park_in} X={printer["gcode_macro _MACRO_CONFIG"].start_print_park_x}
  G0 Z{z} F6000

[gcode_macro _PRINT_START_PRIME]
gcode:
  {% if printer["gcode_macro _MACRO_CONFIG"].nozzle_priming|lower == 'primeline' %}
    SET_DISPLAY_TEXT MSG="Prime line..."
    _PRIME_LINE
  {% endif %}
  {% if printer["gcode_macro _MACRO_CONFIG"].nozzle_priming|lower == 'primeblob' %}
    SET_DISPLAY_TEXT MSG="Prime blob..."
    _PRIME_BLOB
  {% endif %}
  {% if printer["gcode_macro _MACRO_CONFIG"].skew_profile is defined %}
    SET_DISPLAY_TEXT MSG="Load skew profile..."
    SKEW_PROFILE LOAD={printer["gcode_macro _MACRO_CONFIG"].skew_profile}
  {% endif %}

#####
# END PRINT MACROS
#####

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro PRINT_END]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  _PRINT_END_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  _PRINT_END_AFTER_HEATERS_OFF
  _PRINT_END_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro _MACRO_CONFIG"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Steppers off
  {% set disable_z_steppers_after_print = printer["gcode_macro _MACRO_CONFIG"].disable_z_steppers_after_print %}
  {% if disable_z_steppers_after_print %}
    DISABLE_STEPPERS
  {% else %}
    DISABLE_STEPPERS_EXCEPT_Z
  {% endif %}
  # Part cooling fan off
  M107
  SET_DISPLAY_TEXT MSG="Print Done."
  _DISPLAY_AND_CLEAR MSG="Print Done." DURATION=30
  RESTORE_GCODE_STATE NAME=end_print_state

#####
# END PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _PRINT_END_BEFORE_HEATERS_OFF]
gcode:
    RESPOND MSG="Cleaning up..."

[gcode_macro _PRINT_END_AFTER_HEATERS_OFF]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600

[gcode_macro _PRINT_END_PARK]
gcode:
  _PARK LOCATION={printer["gcode_macro _MACRO_CONFIG"].end_print_park_in} X={printer["gcode_macro _MACRO_CONFIG"].end_print_park_x}

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
  PRINT_END
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  #SDCARD_RESET_FILE
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro _MACRO_CONFIG"].macro_travel_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    _PARK LOCATION={printer["gcode_macro _MACRO_CONFIG"].pause_print_park_in} X={printer["gcode_macro _MACRO_CONFIG"].pause_print_park_x}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  # Prime
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE

#####
# COLOR CHANGE
#####
[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
  PAUSE
  UNLOAD_FILAMENT
  SET_DISPLAY_TEXT MSG="Please load new filament and resume"
  RESPOND MSG="Please load new filament and resume"
  