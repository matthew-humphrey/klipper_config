#####################################################################
#   Einsy Macros
#####################################################################
[respond]
default_type=command

[force_move]
enable_force_move: TRUE

[gcode_macro HAS_PROBE]
gcode:
  {% if printer.configfile.settings["probe"] is defined %}
  RESPOND MSG="HAS PROBE"
  {% else %}
  RESPOND MSG="DOES NOT HAVE PROBE"
  {% endif %}

[gcode_macro WHICH_AXIS]
gcode:
  {% if 'X' in rawparams %}
    RESPOND MSG="X"
  {% endif %}
  {% if 'Y' in rawparams %}
    RESPOND MSG="Y"
  {% endif %}
  {% if 'Z' in rawparams %}
    RESPOND MSG="Z"
  {% endif %}

[gcode_macro CHECK_MESH]
gcode:
  {% set PROFILE = params.PROFILE|default("default") %}
#  {% set profile_exists = (0 != printer.bed_mesh.profiles[PROFILE]|length) %}
  {% set profile_exists = (printer.bed_mesh.profiles[PROFILE] is defined) %}
  {% if profile_exists %} 
  RESPOND MSG="BED MESH PROFILE {PROFILE} EXISTS"
  RESPOND MSG="{printer.bed_mesh.profiles[PROFILE]}"
  {% else %}
  RESPOND MSG="BED MESH PROFILE {PROFILE} DOES NOT EXIST"
  {% endif %}


[gcode_macro WAIT_FOR]
gcode:
    {% set MSG = params.MSG|default("Waiting for") %}
    {% set S = params.S|default(0)|int %}
    {% set M = params.M|default(0)|int %}
    {% if M != 0 %}
        {% for t in range(M) %}
          M117 {MSG} {t}/{M}m
          G4 P{60 * 1000}
        {% endfor %}
    {% elif S != 0 %}
        {% for t in range(S) %}
          M117 {MSG} {t}/{S}s
          G4 P{1000}
        {% endfor %}
    {% endif %}
    M117 {MSG} complete


[gcode_macro DUMP_PRINTER_STATE]
gcode:
  {% set filter = params.FILTER|default('')|string %}
  {% set exclude_vars = ['bed_mesh'] %}
  {% set ns = namespace(output = '') %}
  {% for outer_var in printer %}
    {% if filter == '' or outer_var == filter %}
      {% for inner_var in printer[outer_var] %}
        {% if inner_var is not in exclude_vars %}
          {% set line = "printer.%s.%s: %s\n" % (outer_var, inner_var, printer[outer_var][inner_var]) %}
          {% set ns.output = ns.output ~ line %}
        {% endif %}
      {% endfor %}  
    {% endif %}
  {% endfor %}  
  {action_respond_info(ns.output)}

[gcode_macro MAYBE_HOME]
description: Only home unhomed axis
variable_is_kinematic_position_overriden: False
gcode:
  {% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
    RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
    G28
    SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
  {% else %}
    {% set axes = '' %}
    {% set isHomed = true %}
    {% set axesToHome = '' %}
    {% if params.X is defined %}
      {% set axes = axes ~ 'X ' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
    {% endif %}
    {% if params.Y is defined %}
      {% set axes = axes ~ 'Y ' %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
    {% endif %}
    {% if params.Z is defined %}
      {% set axes = axes ~ 'Z ' %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
      {% set axes = '' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if isHomed is false %}
      M117 Homing {axesToHome}
      RESPOND MSG="Homing {axesToHome}"
      G28 {axesToHome}
    {% else %}
      RESPOND MSG="All requested axes already homed, skipping.."
    {% endif %}
  {% endif %}

[gcode_macro CHECK_HOME]
gcode:
    {% set axes = params.AXES|default('XYZ') %}
    {% set flags_X = 'X' in axes %}
    {% set flags_Y = 'Y' in axes %}
    {% set flags_Z = 'Z' in axes %}
    {% set home_flags = '' %}
    {% if flags_X and not 'x' in printer.toolhead.homed_axes %}
      {% set home_flags = home_flags + 'X' %}
    {% endif %}
    {% if flags_Y and not 'y' in printer.toolhead.homed_axes  %}
      {% set home_flags = home_flags + 'Y' %}
    {% endif %}
    {% if flags_Z and not 'z' in printer.toolhead.homed_axes  %}
      {% set home_flags = home_flags + 'Z' %}
    {% endif %}
    {% if home_flags != '' %}
      G28 {home_flags}
    {% endif %}

[gcode_macro G80]
gcode:
    G28
    BED_MESH_CALIBRATE PROFILE=LAST_G80
    BED_MESH_OUTPUT
    CENTER_XY_Z_50

[gcode_macro G81]
gcode:
    BED_MESH_OUTPUT
 
[gcode_macro CENTER_X]
gcode:
    {% set x_config = printer.configfile.settings['stepper_x'] %}
    {% set x_center = (x_config.position_max + x_config.position_min) / 2 %}
    CHECK_HOME AXES=X
    G1 X{x_center} F2000

[gcode_macro CENTER_Y]
gcode:
    {% set y_config = printer.configfile.settings['stepper_y'] %}
    {% set y_center = (y_config.position_max + y_config.position_min) / 2 %}
    CHECK_HOME AXES=Y
    G1 Y{y_center} F2000

[gcode_macro CENTER_XY]
gcode:
    {% set x_config = printer.configfile.settings['stepper_x'] %}
    {% set x_center = (x_config.position_max + x_config.position_min) / 2 %}
    {% set y_config = printer.configfile.settings['stepper_y'] %}
    {% set y_center = (y_config.position_max + y_config.position_min) / 2 %}
    CHECK_HOME AXES=XY
    G1 X{x_center} Y{y_center} F2000

[gcode_macro CENTER_PROBE_XY]
gcode:
    {% set probe_config = printer.configfile.settings['probe'] %}
    {% set x_config = printer.configfile.settings['stepper_x'] %}
    {% set y_config = printer.configfile.settings['stepper_y'] %}
    {% set x_center = (x_config.position_max + x_config.position_min) / 2 - probe_config.x_offset %}
    {% set y_center = (y_config.position_max + y_config.position_min) / 2 - probe_config.y_offset %}
    CHECK_HOME AXES=XY
    G1 X{x_center} Y{y_center} F2000

[gcode_macro CENTER_PROBE_CALIBRATE]
gcode:
    CENTER_PROBE_XY
    G1 Z10 F1000
    PROBE_CALIBRATE

[gcode_macro CENTER_XY_Z_50]
gcode:
    {% set x_config = printer.configfile.settings['stepper_x'] %}
    {% set x_center = (x_config.position_max + x_config.position_min) / 2 %}
    {% set y_config = printer.configfile.settings['stepper_y'] %}
    {% set y_center = (y_config.position_max + y_config.position_min) / 2 %}
    CHECK_HOME AXES=XYZ
    G1 X{x_center} Y{y_center} Z50 F2000

[gcode_macro HOME_AND_CENTER]
gcode:
    G28
    CENTER_XY_Z_50

[gcode_macro CHECK_TRAM_Z]
variable_is_trammed: 0
gcode:
    {% if printer["gcode_macro CHECK_TRAM_Z"].is_trammed %}
        M118 TRAM_Z skipped
    {% else %}
        TRAM_Z
    {% endif %}

[gcode_macro TRAM_Z]
gcode:
    {% set TRAM_CUR = 0.2 %}
    {% set driver_config = printer.configfile.settings['tmc2130 stepper_z'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set z_top = printer.configfile.settings['stepper_z'].position_max - 1 %}
    {% set z_near_top = z_top - 3 %}
    {% set z_near_top_offset = z_top - 8 %}
    G28
    G90
    CENTER_X
    G1 Z{z_near_top} F700
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={TRAM_CUR}
    SET_KINEMATIC_POSITION Z={z_near_top_offset}
    G1 Z{z_top} F300
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={RUN_CUR}
    G1 Z5 F700
    G28
    SET_GCODE_VARIABLE MACRO=CHECK_TRAM_Z VARIABLE=is_trammed VALUE=1

[gcode_macro UP]
gcode:
    G1 Z100 F1500

[gcode_macro FORCE_UP]
gcode:
    FORCE_MOVE STEPPER=stepper_z Distance=10 Velocity=10

[static_digital_output debug_led]
# Keeps Debug LED off / not floating
pins: !PB7

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=_BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro M600]
variable_extr_temp: 0
gcode:
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{params.Z|default(10)}
    G90
    G1 X{params.X|default(100)} Y{params.Y|default(0)} F3000

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
    M117

[gcode_macro DISABLE_XY_STEPPERS]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    G91
    G1 X-2 Y-2 E-1 F300
    # Raise nozzle by 50mm
    G1 Z50 F3000
    G90
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    # Disable steppers
    DISABLE_XY_STEPPERS
    #Disable Fan
    M107

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(200) %}      #edit to your park position
    {% set y = params.Y|default(200) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(2) %}        #edit to your retract length    
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
        M118 Extruder not hot enough
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
        M118 Printer not homed
    {% endif %}   

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'false' %}
        M118 Extruder not hot enough
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro PURGE_LINE]
gcode:
    # Purge Line 
    G1 X3 Y-4.0 F1000.0
    G1 Z0.4 F1000.0
    G1 X55.0 E8.0 F2000.0
    G1 Z0.3 F1000.0
    G92 E0.0
    G1 X240.0 E25.0  F2200.0
    G1 Y-3.0 F1000.0
    G1 X55.0 E25 F1400.0
    G1 Z0.20 F1000.0
    G1 X5.0 E4.0 F1000.0
    G92 E0.0 ; reset extruder distance position    

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-1 F300
    # Raise nozzle by 50mm
    G1 Z50 F3000
    G90
    # Disable steppers
    DISABLE_XY_STEPPERS
    #Disable Fan
    M107

[gcode_macro _START_PRINT_SOUND]
gcode:
     M300 S500 P500
     M300 S1000 P500
     M300 S500 P500
     M300 S1000 P500
     M300 S500 P500
     M300 S1000 P500

#####################################################################
#	START_PRINT Macro
#	For this macro to work properly, the slicer start Gcode must be modified.
#	SuperSlicer is preferred as this can talk native Klipper Gcode, but other slicers may work as well.
#	In the Start print Gcode of SuperSlicer make sure it contains only the following lines:
#	_DISPLAY_PLATE
#	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=BED_TEMP VALUE=[first_layer_bed_temperature]
#	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=EXTRUDER_TEMP VALUE=[first_layer_temperature]
#	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=CHAMBER_TEMP VALUE=[chamber_temperature]
#	M104 S0
#	M140 S0
#	START_PRINT
#
#	Also, make sure you have tuned your Pressure Advance per Filament type / Setting and add the PA value to your Filament Settings Custom Gcode in the Start Gcode field.
#	For example:
#	SET_PRESSURE_ADVANCE ADVANCE=0.0625
#####################################################################
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    # metric values
    G21
    # use absolute coordinates
    G90
    # set extruder to relative mode
    M83
    # start with the fan off
    M107
    # Start pre-heating bed and extruder
    M117 Preheat
    # set extruder temp 55°C below target extruder temperature to avoid filament dripping
    M104 S{EXTRUDER_TEMP - 55}
    # start bed heating
    M140 S{BED_TEMP}
    # Tram the Z axis (also homes the printer)
    Tram_Z
    # Move to front left and up some so user can clean nozzle
    G0 X3 Y-3.0 Z100 F1000
    # wait for bed temp
    M190 S{BED_TEMP}
    # Move nozzle closer to bed to allow PINDA to heat up a bit
    G0 Z5 F1000
    # wait for chamber temp
    WAIT_CHAMBER TEMP={CHAMBER_TEMP}
    G28 ; Force home (important after temps have changed)
    G80 ; Mesh
    # clear pause
    CLEAR_PAUSE
    # Move the nozzle near the start of the purge line
    G1 X3 Y-4.0 Z15 F3000
    # set and wait for nozzle/bed to reach temperature
    M117 Nozzle to {EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}       ; wait for extruder temp
    # zero the extruded length
    G92 E0
    # Notify user print is starting
    _START_PRINT_SOUND    
    # purge line
    M117 Purge line
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=4
        PURGE_LINE
    # zero the extruded length
    G92 E0.0 
    # start printing
    G1 F9000
    M117 Printing


##  Clear display after Duration 
[delayed_gcode _CLEAR_DISPLAY]
gcode:
    M117

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
    M117

[gcode_macro Emergency_Lift_Z]
gcode:
    SET_KINEMATIC_POSITION X=0 Y=0 Z=0
    G91
    G1 Z+25 F1500
    G90